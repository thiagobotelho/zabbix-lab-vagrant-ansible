---
- name: Adicionar chave do repositório Grafana
  ansible.builtin.apt_key:
    url: https://packages.grafana.com/gpg.key
    state: present

- name: Adicionar repositório Grafana
  ansible.builtin.apt_repository:
    repo: deb https://packages.grafana.com/oss/deb stable main
    state: present

- name: Atualizar cache APT
  ansible.builtin.apt:
    update_cache: yes

- name: Instalar pacote do Grafana
  ansible.builtin.apt:
    name: grafana
    state: present

- name: Instalar plugin do Zabbix no Grafana
  ansible.builtin.command: grafana-cli plugins install alexanderzobnin-zabbix-app
  args:
    creates: "/var/lib/grafana/plugins/alexanderzobnin-zabbix-app"

- name: Habilitar e iniciar serviço Grafana
  ansible.builtin.systemd:
    name: grafana-server
    enabled: true
    state: restarted

- name: Esperar porta 3000 do Grafana ficar disponível
  ansible.builtin.wait_for:
    port: 3000
    timeout: 60

- name: Habilitar plugin Zabbix via API
  uri:
    url: "{{ grafana_host }}/api/plugins/alexanderzobnin-zabbix-app/settings"
    method: POST
    user: "{{ grafana_api_user }}"
    password: "{{ grafana_api_password }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    body_format: json
    body: '{}'
  register: enable_plugin_response
  failed_when: false
  changed_when: false

- name: Criar datasource Zabbix
  uri:
    url: "{{ grafana_host }}/api/datasources"
    method: POST
    user: "{{ grafana_api_user }}"
    password: "{{ grafana_api_password }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    body_format: json
    body: |
      {
        "name": "Zabbix",
        "type": "alexanderzobnin-zabbix-datasource",
        "url": "http://{{ zabbix_server_ip }}/zabbix",
        "access": "proxy",
        "basicAuth": false,
        "jsonData": {
          "username": "{{ zabbix_user }}",
          "password": "{{ zabbix_password }}"
        }
      }
    status_code: 200

- name: Importar "Zabbix System Status"
  uri:
    url: "{{ grafana_host }}/api/dashboards/import"
    method: POST
    user: "{{ grafana_api_user }}"
    password: "{{ grafana_api_password }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    body_format: json
    body: >
      {
        "dashboard": {{ lookup('url', 'https://grafana.com/api/dashboards/5363/revisions/1/download', split_lines=False) }},
        "overwrite": true,
        "inputs": [
          {
            "name": "DS_ZABBIX",
            "type": "datasource",
            "pluginId": "alexanderzobnin-zabbix-datasource",
            "value": "Zabbix"
          }
        ]
      }
    status_code: 200

- name: Importar dashboard PostgreSQL By Zabbix Agent 2
  uri:
    url: "{{ grafana_host }}/api/dashboards/import"
    method: POST
    user: "{{ grafana_api_user }}"
    password: "{{ grafana_api_password }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
    body_format: json
    body: >
      {
        "dashboard": {{ lookup('url', 'https://grafana.com/api/dashboards/16981/revisions/1/download', split_lines=False) }},
        "overwrite": true,
        "inputs": [
          {
            "name": "DS_ZABBIX_5.4",
            "type": "datasource",
            "pluginId": "alexanderzobnin-zabbix-datasource",
            "value": "Zabbix"
          }
        ]
      }
    status_code: 200

- name: Criar datasource PostgreSQL no Grafana
  ansible.builtin.uri:
    url: "{{ grafana_host }}/api/datasources"
    method: POST
    user: "{{ grafana_api_user }}"
    password: "{{ grafana_api_password }}"
    force_basic_auth: true
    status_code: 200
    headers:
      Content-Type: "application/json"
    body_format: json
    body: |
      {
        "name": "PostgreSQL Zabbix",
        "type": "postgres",
        "url": "{{ zabbix_db_host }}:5432",
        "access": "proxy",
        "database": "{{ zabbix_db_name }}",
        "user": "{{ zabbix_db_user }}",
        "secureJsonData": {
          "password": "{{ zabbix_db_password }}"
        },
        "isDefault": false,
        "jsonData": {
          "sslmode": "disable"
        }
      }


